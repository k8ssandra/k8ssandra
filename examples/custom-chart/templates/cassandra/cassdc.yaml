{{- $datacenter := (index .Values.cassandra.datacenters 0) -}}
{{- $medusaImage := (printf "%s:%s" .Values.medusa.image.repository .Values.medusa.image.tag) -}}

{{- if and (not .Values.cassandra.image)  (not (hasKey .Values.cassandra.versionImageMap .Values.cassandra.version)) -}}
  {{- fail (print .Values.cassandra.version " is not a supported Cassandra version") }}
{{- end -}}

{{- if and (eq .Values.medusa.storage "local") (not (and (.Values.medusa.podStorage.storageClass) (.Values.medusa.podStorage.size))) -}}
  {{- fail (print "If medusa storage type is set to local, the podStorage storageClass and size must be set") }}
{{- end -}}
{{- if .Values.cassandra.enabled -}}

apiVersion: cassandra.datastax.com/v1beta1
kind: CassandraDatacenter
metadata:
  name: {{ $datacenter.name }}
  labels: {{ include "k8ssandra.labels" . | indent 4 }}
  annotations:
{{- if .Values.reaper.enabled }}
    reaper.cassandra-reaper.io/instance: {{ .Release.Name }}-reaper
{{- end }}
spec:
  clusterName: {{ include "k8ssandra.clusterName" . }}
  serverType: cassandra
  serverVersion: {{ .Values.cassandra.version | quote }}
  dockerImageRunsAsCassandra: true
  serverImage: {{ include "k8ssandra.cassandraImage" . }}
  configBuilderImage: {{ include "k8ssandra-common.flattenedImage" .Values.cassandra.configBuilder.image }}
  systemLoggerImage: {{ include "k8ssandra-common.flattenedImage" .Values.cassandra.loggingSidecar.image }}
  {{- if .Values.cassandra.serviceAccount }}
  serviceAccount: {{ default "default" .Values.cassandra.serviceAccount }}
  {{- end }}
  managementApiAuth:
    insecure: {}
  size: {{ $datacenter.size }}
  {{- if $datacenter.racks }}
  racks:
  {{- range $datacenter.racks  }}
  - name: {{ .name }}
    {{- if .affinityLabels }}
    nodeAffinityLabels: {{ toYaml .affinityLabels | nindent 6 }}
    {{- end}}
  {{- end }}
  {{- end }}
  storageConfig:
    cassandraDataVolumeClaimSpec:
      storageClassName: {{ .Values.cassandra.cassandraLibDirVolume.storageClass | default "standard" }}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.cassandra.cassandraLibDirVolume.size | default "5Gi" }}
    {{- if and (eq .Values.medusa.storage "local") ( .Values.medusa.podStorage ) }}
    additionalVolumes:
      - mountPath: /mnt/backups
        name: medusa-backups
        pvcSpec:
          storageClassName: {{ .Values.medusa.podStorage.storageClass }}
          accessModes:
          {{- if .Values.medusa.podStorage.accessModes }}
          {{- range .Values.medusa.podStorage.accessModes }}
            - {{ . }}
          {{- end }}
          {{- else }}
            - ReadWriteOnce
          {{- end }}
          resources:
            requests:
              storage: {{ .Values.medusa.podStorage.size }}
    {{- end }}
{{- if .Values.cassandra.additionalSeeds }}
  additionalSeeds:
  {{- range .Values.cassandra.additionalSeeds }}
    - {{ . }}
  {{- end }}
{{- end }}
{{- if .Values.cassandra.additionalServiceConfig }}
  additionalServiceConfig: 
{{ toYaml .Values.cassandra.additionalServiceConfig | indent 4 }}
{{- end }}
  allowMultipleNodesPerWorker: {{ .Values.cassandra.allowMultipleNodesPerWorker | default false}}
{{- if .Values.cassandra.allowMultipleNodesPerWorker}}
  resources:
    limits:
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.cassandra.resources.limits) | indent 6}}
    requests:
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.cassandra.resources.requests) | indent 6}}
{{- else if .Values.cassandra.resources }}
  resources:
{{ toYaml .Values.cassandra.resources | indent 6 }}
{{- end }}
{{- if .Values.cassandra.auth.enabled }}
{{- if .Values.cassandra.auth.superuser.secret }}
  superuserSecretName: {{ .Values.cassandra.auth.superuser.secret }}
{{- else if .Values.cassandra.auth.superuser.username }}
  superuserSecretName: {{ include "k8ssandra.superuserSecretName" . }}
{{- end }}
  {{- if or .Values.reaper.enabled .Values.medusa.enabled .Values.stargate.enabled }}
  users:
  {{- if .Values.reaper.enabled }}
    - secretName: {{ include "k8ssandra.reaperUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- if .Values.medusa.enabled }}
    - secretName: {{ include "k8ssandra.medusaUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- if .Values.stargate.enabled }}
    - secretName: {{ include "k8ssandra.stargateUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.cassandra.tolerations }}
  tolerations: {{ toYaml .Values.cassandra.tolerations | nindent 4 }}
{{- end }}
  config:
  {{- /*
    configOverride is an undocumented property that is intended for advanced use cases like
    production support. General use is discouraged If there is a particular Cassandra or
    JVM setting you need exposed, please open an issue for it.
   */ -}}
  {{- if .Values.cassandra.configOverride }}
    {{- toYaml .Values.cassandra.configOverride | nindent 4 -}}
  {{- else }}
    cassandra-yaml:
      {{- include "k8ssandra.default_num_tokens" . }}
      {{- if or $datacenter.allocateTokensForLocalRF (hasPrefix "4" .Values.cassandra.version) }}
      {{- if (hasPrefix "3" .Values.cassandra.version) }}
      {{- fail (print "The allocateTokensForLocalRF property cannot be used with Cassandra 3.11.x") }}
      {{- else }}
      allocate_tokens_for_local_replication_factor: {{ $datacenter.allocateTokensForLocalRF | default 3 }}
      {{- end }}
      {{- end}}
  {{- if .Values.cassandra.auth.enabled }}
      authenticator: PasswordAuthenticator
      authorizer: CassandraAuthorizer
  {{- else }}
      authenticator: AllowAllAuthenticator
      authorizer: AllowAllAuthorizer
  {{- end }}
      role_manager: CassandraRoleManager
      roles_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      roles_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
      permissions_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      permissions_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
      credentials_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      credentials_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
  {{- if $datacenter.fql }}
    {{- if $datacenter.fql.enabled }}
      {{- if (hasPrefix "3" .Values.cassandra.version) }}
        {{- fail (print .Values.cassandra.version " does not support FQL, use Cassandra 4x or greater.") }}
      {{- end }}
      full_query_logging_options:
        log_dir: /var/log/cassandra/fql
        roll_cycle: HOURLY
        block: true
        max_queue_weight: 268435456 # 256 MiB
        max_log_size: 17179869184 # 16 GiB
        max_archive_retries: 10
    {{- end }}
  {{- end }}
  {{- if $datacenter.audit_logging}}
    {{- if $datacenter.audit_logging.enabled }}
      {{- if (hasPrefix "3" .Values.cassandra.version) }}
        {{- fail (print .Values.cassandra.version " does not support audit logging, use Cassandra 4x or greater.") }}
      {{- end }}
      audit_logging_options:
        enabled: true
        logger:
          - class_name: BinAuditLogger
    {{- end }}
  {{- end }}
  {{- if $datacenter.client_backpressure }}
    {{- if (hasPrefix "3" .Values.cassandra.version) }}
      {{- fail (print .Values.cassandra.version " does not support client backpressure configuration, use Cassandra 4x or greater.") }}
    {{- end }}
    {{- range $key, $val := $datacenter.client_backpressure }}
      {{ $key }}: {{ $val }}      
    {{- end }}
  {{- end }}
  {{- if (hasPrefix "3" .Values.cassandra.version) }}
    jvm-options:
  {{- else }}
    jvm-server-options:
  {{- end }}
    {{- include "k8ssandra.configureGc" . -}}
    {{- include "k8ssandra.configureJvmHeap" . }}
      additional-jvm-opts:
{{- if .Values.cassandra.auth.enabled }}
        - "-Dcassandra.system_distributed_replication_dc_names={{ $datacenter.name }}"
        - "-Dcassandra.system_distributed_replication_per_dc={{ min 5 $datacenter.size }}"
{{- end }}
        - "-Dcassandra.allow_alter_rf_during_range_movement=true"
{{- end }}
{{- if not .Values.cassandra.loggingSidecar.enabled }}
  disableSystemLoggerSidecar: true
{{- end }}
  podTemplateSpec:
    spec:
      initContainers:
      - name: base-config-init
        image: {{ include "k8ssandra.cassandraImage" . }}
        imagePullPolicy: IfNotPresent
        securityContext: {{- toYaml .Values.cassandra.baseConfig.securityContext | nindent 10 }}
        command:
          - /bin/sh
        args:
          - -c
          - cp -r /etc/cassandra/* /cassandra-base-config/
        volumeMounts:
          - name: cassandra-config
            mountPath: /cassandra-base-config/
          - name: cassandra-metrics-coll-config
            mountPath: /opt/metrics-collector/config/
          - name: cassandra-tmp
            mountPath: /tmp/
          {{- if .Values.reaper.enabled }}
          - name: reaper-config
            mountPath: /etc/reaper/
          {{- end }}
      - name: server-config-init
        securityContext: {{- toYaml .Values.cassandra.configBuilder.securityContext | nindent 10 }}
    {{- if .Values.cassandra.cassandraYamlConfigMap }}
      - name: apply-custom-config
        image: {{ include "k8ssandra-common.flattenedImage" .Values.cassandra.applyCustomConfig.image }}
        imagePullPolicy: {{ .Values.cassandra.applyCustomConfig.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
        args:
          - yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' /config/cassandra.yaml /cassandra-custom-config/cassandra.yaml > /config/merged-cassandra.yaml && mv /config/merged-cassandra.yaml /config/cassandra.yaml
        volumeMounts:
          - name: cassandra-custom-config
            mountPath: /cassandra-custom-config
          - name: server-config
            mountPath: /config
    {{- end }}
     {{- if (or .Values.cassandra.auth.enabled .Values.reaper.enabled) }}
      - name: jmx-credentials
        image: {{ include "k8ssandra-common.flattenedImage" .Values.cassandra.jmxCredentialsConfig.image }}
        imagePullPolicy: {{ .Values.cassandra.jmxCredentialsConfig.image.pullPolicy }}
        securityContext: {{- toYaml .Values.cassandra.jmxCredentialsConfig.securityContext | nindent 10 }}
        env:
        {{- if .Values.reaper.enabled }}
          - name: REAPER_JMX_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.reaperJmxUserSecretName" . }}
                key: username
          - name: REAPER_JMX_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.reaperJmxUserSecretName" . }}
                key: password
          {{- end }}
          - name: SUPERUSER_JMX_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.superuserSecretName" . }}
                key: username
          - name: SUPERUSER_JMX_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.superuserSecretName" . }}
                key: password
        args:
          - /bin/sh
          - -c
        {{- if .Values.reaper.enabled }}
          - echo "$REAPER_JMX_USERNAME $REAPER_JMX_PASSWORD" > /config/jmxremote.password && echo "$SUPERUSER_JMX_USERNAME $SUPERUSER_JMX_PASSWORD" >> /config/jmxremote.password
        {{- else }}
          - echo "$SUPERUSER_JMX_USERNAME $SUPERUSER_JMX_PASSWORD" > /config/jmxremote.password
        {{- end }}
        volumeMounts:
          - mountPath: /config
            name: server-config
      {{- end }}
      {{- if .Values.medusa.enabled }}
      - name: medusa-restore
        image: {{ include "k8ssandra-common.flattenedImage" .Values.medusa.image }}
        {{- if (and .Values.medusa.restoreInitContainerConfig .Values.medusa.restoreInitContainerConfig.securityContext) }}
        securityContext: {{ toYaml .Values.medusa.restoreInitContainerConfig.securityContext | nindent 10 }}
        {{- end }}
        imagePullPolicy: {{ .Values.medusa.image.pullPolicy }}
        env:
          - name: MEDUSA_MODE
            value: RESTORE
          {{- include "medusa.cassandraAuthEnvVars" . }}
        volumeMounts:
          - name: {{ include "medusa.configMapName" . }}
            mountPath: /etc/medusa
          - name: server-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
          - name: podinfo
            mountPath: /etc/podinfo
          {{- if not (eq .Values.medusa.storage "local") }}
          - name:  {{ .Values.medusa.storageSecret }}
            mountPath: /etc/medusa-secrets
          {{- else }}
          - name:  medusa-backups
            mountPath: /mnt/backups
          {{- end }}
      {{- end }}
      {{- if .Values.cassandra.initContainers }}
      {{- toYaml .Values.cassandra.initContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: cassandra
        securityContext: {{- toYaml .Values.cassandra.securityContext | nindent 10 }}
        {{- if (or .Values.reaper.enabled .Values.cassandra.metric_filters) }}
        env:
          {{- if .Values.reaper.enabled }}
          - name: LOCAL_JMX
            value: "no"
          {{- end }}
          {{- if .Values.cassandra.metric_filters }}
          - name: METRIC_FILTERS
            value: {{ printf "%s" (join " " .Values.cassandra.metric_filters) }}
          {{- end }}
        {{- end }}

        {{- if or .Values.medusa.enabled .Values.cassandra.encryption.keystoreSecret }}
        volumeMounts:
          {{- if .Values.medusa.enabled }}
          - name: cassandra-config
            mountPath: /etc/cassandra
          - name: podinfo
            mountPath: /etc/podinfo
          {{- end }}
          {{- if .Values.cassandra.encryption.keystoreSecret }}
          {{- if not .Values.cassandra.encryption.keystoreMountPath }}
            {{- (fail (print "keystoreMountPath must be set when keystoreSecret is set")) }}
          {{- end }}
          - name: keystore-secret
            mountPath: {{ .Values.cassandra.encryption.keystoreMountPath }}
          {{- end}}
          {{- if .Values.cassandra.encryption.truststoreSecret }}
          {{- if not .Values.cassandra.encryption.truststoreMountPath }}
          {{- (fail (print "truststoreMountPath must be set when keystoreSecret is set")) }}
          {{- end }}
          - name: truststore-secret
            mountPath: {{ .Values.cassandra.encryption.truststoreMountPath }}
        {{- end}}
        {{- end }}

      {{- if .Values.medusa.enabled }}
      - name: medusa
        image: {{ include "k8ssandra-common.flattenedImage" .Values.medusa.image }}
        securityContext: {{- toYaml .Values.medusa.securityContext | nindent 10 }}
        imagePullPolicy: {{ .Values.medusa.image.pullPolicy }}
        ports:
          - containerPort: 50051
        env:
          - name: MEDUSA_MODE
            value: GRPC
          {{- include "medusa.cassandraAuthEnvVars" . }}
        readinessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 10
        volumeMounts:
          - name: {{ include "medusa.configMapName" . }}
            mountPath: /etc/medusa
          - name: cassandra-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
          {{- if not (eq .Values.medusa.storage "local") }}
          - mountPath: /etc/medusa-secrets
            name: {{ .Values.medusa.storageSecret }}
          {{- else }}
          - name:  medusa-backups
            mountPath: /mnt/backups
          {{- end }}
      {{- end }}
      volumes:
      - name: cassandra-config
        emptyDir: {}
      - name: cassandra-metrics-coll-config
        emptyDir: {}
      - name: cassandra-tmp
        emptyDir: {}
      {{- if .Values.cassandra.cassandraYamlConfigMap }}
      - name: cassandra-custom-config
        configMap:
          name: {{ .Values.cassandra.cassandraYamlConfigMap }}
      {{- end }}
      {{- if .Values.reaper.enabled }}
      - name: reaper-config
        emptyDir: {}
      {{- end }}
      {{- if .Values.cassandra.encryption.keystoreSecret }}
      - name: keystore-secret
        secret:
          secretName: {{ .Values.cassandra.encryption.keystoreSecret }}
      {{- end }}
      {{- if .Values.cassandra.encryption.truststoreSecret }}
      - name: truststore-secret
        secret:
          secretName: {{ .Values.cassandra.encryption.truststoreSecret }}
      {{- end }}
      {{- if .Values.medusa.enabled }}
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
      - name: {{ include "medusa.configMapName" . }}
        configMap:
          name: {{ include "medusa.configMapName" . }}
          items:
            - key: medusa.ini
              path: medusa.ini
      {{- if not (eq .Values.medusa.storage "local") }}
      - name:  {{ .Values.medusa.storageSecret }}
        secret:
          secretName: {{ .Values.medusa.storageSecret }}
      {{- end }}
{{- end }}
{{- end }}
