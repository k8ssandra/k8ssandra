{{- if .Values.stargate.enabled }}
{{- $heapMB := required "stargate.heapMB is required" .Values.stargate.heapMB -}}
{{- $image := default "stargateio/stargate-3_11:v1.0.0" .Values.stargate.image -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
  labels:
    release: {{ .Release.Name }}
    app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
{{ include "k8ssandra.labels" . | indent 4 }}
spec:
  replicas: {{ required "stargate.replicas is required" .Values.stargate.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
    spec:
      initContainers:
          - name: wait-for-cassandra
            image: alpine:3.12.2
            imagePullPolicy: IfNotPresent
            command:
              - sh
            args:
              - -c
              - |
                echo "Waiting for at least one cassandra node to finish bootstrapping..."
                while ! nslookup {{ include "k8ssandra.clusterName" . }}-seed-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | default "cluster.local" }}; do
                    sleep 5
                done
                echo "Cassandra is ready. Starting Stargate..."
      containers:
        - name: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
          image: {{ $image }}
          imagePullPolicy: {{ .Values.stargate.imagePullPolicy }}
          ports:
            - name: graphql
              containerPort: 8080
              protocol: TCP
            - name: authorization
              containerPort: 8081
              protocol: TCP
            - name: rest
              containerPort: 8082
              protocol: TCP
            - name: health
              containerPort: 8084
              protocol: TCP
            - name: metrics
              containerPort: 8085
              protocol: TCP
            - name: http-schemaless
              containerPort: 8090
              protocol: TCP
            - name: native
              containerPort: 9042
              protocol: TCP
            - name: inter-node-msg
              containerPort: 8609
              protocol: TCP
            - name: intra-node
              containerPort: 7000
              protocol: TCP
            - name: tls-intra-node
              containerPort: 7001
              protocol: TCP
          resources:
            limits:
              cpu: {{ required "stargate.cpuLimMillicores is required" .Values.stargate.cpuLimMillicores }}m
              memory: {{ mul 4 $heapMB }}Mi
            requests:
              cpu: {{ required "stargate.cpuReqMillicores" .Values.stargate.cpuReqMillicores }}m
              memory: {{ mul 2 $heapMB }}Mi
          env:
            - name: JAVA_OPTS
              value: >-
                -XX:+CrashOnOutOfMemoryError
                -Xms{{ $heapMB }}M
                -Xmx{{ $heapMB }}M
            - name: CLUSTER_NAME
              value: {{ include "k8ssandra.clusterName" . | quote }}
            - name: CLUSTER_VERSION
              value: "3.11"
            - name: SEED
              value: "{{ include "k8ssandra.clusterName" . }}-seed-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | default "cluster.local" }}"
            - name: DATACENTER_NAME
              value: {{ include "k8ssandra.datacenterName" . }}
            - name: RACK_NAME
              # The rack name is temporarily hard coded until we get multi-rack support implemented.
              # See https://github.com/k8ssandra/k8ssandra/issues/54.
              value: default
            - name: ENABLE_AUTH
              value: "true"
          livenessProbe:
            httpGet:
              path: /checker/liveness
              port: health
            timeoutSeconds: 10
            initialDelaySeconds: 240
          readinessProbe:
            httpGet:
              path: /checker/readiness
              port: health
            timeoutSeconds: 3
            initialDelaySeconds: 240
{{- end }}
