{{- if .Values.stargate.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
  labels:
    app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
{{ include "k8ssandra.labels" . | indent 4 }}
spec:
  replicas: {{ default 1 .Values.stargate.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
    spec:
      initContainers:
          - name: wait-for-cassandra
            image: alpine:3.12.2
            imagePullPolicy: IfNotPresent
            command:
              - sh
            args:
              - -c
              - |
                echo "Waiting for at least one cassandra node to finish bootstrapping..."
                while ! nslookup {{ .Values.cassandra.clusterName }}-seed-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | default "cluster.local" }}; do
                    sleep 5
                done
                echo "Cassandra is ready. Starting Stargate..."
      containers:
        - name: {{ .Release.Name }}-{{ include "k8ssandra.datacenterName" . }}-stargate
  {{- if eq .Values.stargate.containerImage "auto" }}
    {{- if eq .Values.stargate.clusterVersion "3.11" }}
          image: "stargateio/stargate-3_11:v1.0.0"
    {{- else if eq .Values.stargate.clusterVersion "4.0" }}
          image: "stargateio/stargate-4_0:v1.0.0"
    {{- else }}
      {{- fail "clusterVersion .Values.stargate.clusterVersion is not supported." }}
    {{- end }}
  {{- else }}
          image: {{ required .Values.stargate.containerImage }}
  {{- end }}
          ports:
            - name: graphql
              containerPort: 8080
              protocol: TCP
            - name: authorization
              containerPort: 8081
              protocol: TCP
            - name: rest
              containerPort: 8082
              protocol: TCP
            - name: health
              containerPort: 8084
              protocol: TCP
            - name: metrics
              containerPort: 8085
              protocol: TCP
            - name: http-schemaless
              containerPort: 8090
              protocol: TCP
            - name: native
              containerPort: 9042
              protocol: TCP
            - name: inter-node-msg
              containerPort: 8609
              protocol: TCP
            - name: intra-node
              containerPort: 7000
              protocol: TCP
            - name: tls-intra-node
              containerPort: 7001
              protocol: TCP
          resources:
            limits:
              cpu: {{ .Values.stargate.cpuLimMillicores | default 1000 }}m
              memory: {{ mul 1.5 (.Values.stargate.heapMB | default 1024) }}Mi
            requests:
              cpu: {{ .Values.stargate.cpuReqMillicores | default 200 }}m
              memory: {{ mul 1.5 (.Values.stargate.heapMB | default 1024) }}Mi
          env:
            - name: JAVA_OPTS
              value: >-
                -XX:+CrashOnOutOfMemoryError
                -Xms{{ .Values.stargate.heapMB | default 1024 }}M
                -Xmx{{ .Values.stargate.heapMB | default 1024 }}M
            - name: CLUSTER_NAME
              value: {{ .Values.cassandra.clusterName | quote }}
            - name: CLUSTER_VERSION
              value: "{{ .Values.stargate.clusterVersion }}"
            - name: SEED
              value: "{{ .Values.cassandra.clusterName }}-seed-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | default "cluster.local" }}"
            - name: DATACENTER_NAME
              value: {{ include "k8ssandra.datacenterName" . }}
            - name: RACK_NAME
              # The rack name is temporarily hard coded until we get multi-rack support implemented.
              # See https://github.com/k8ssandra/k8ssandra/issues/54.
              value: default
            - name: ENABLE_AUTH
              value: "true"
          livenessProbe:
            httpGet:
              path: /checker/liveness
              port: health
            timeoutSeconds: 3
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /checker/readiness
              port: health
            timeoutSeconds: 3
            initialDelaySeconds: 60
{{- end }}
