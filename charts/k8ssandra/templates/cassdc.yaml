apiVersion: cassandra.datastax.com/v1beta1
kind: CassandraDatacenter
metadata:
  name: {{ .Values.k8ssandra.datacenterName }}
  labels:
{{ include "k8ssandra.labels" . | indent 4 }}
  annotations:
{{- if .Values.repair.reaper.enabled }}
    reaper.cassandra-reaper.io/instance: {{ .Release.Name }}-reaper-k8ssandra
{{- end }}
spec:
  clusterName: {{ .Values.k8ssandra.clusterName }}
  serverType: cassandra
  serverVersion: {{ .Values.k8ssandra.cassandraVersion | quote }}
  dockerImageRunsAsCassandra: false
{{- if eq "3.11.7" .Values.k8ssandra.cassandraVersion }}
  serverImage: datastax/cassandra-mgmtapi-3_11_7:v0.1.17
{{- else if eq "3.11.8" .Values.k8ssandra.cassandraVersion }}
  serverImage: datastax/cassandra-mgmtapi-3_11_8:v0.1.17
{{- else if eq "3.11.9" .Values.k8ssandra.cassandraVersion }}
  serverImage: datastax/cassandra-mgmtapi-3_11_9:v0.1.17
{{- else }}
  {{- fail (print .Values.k8ssandra.cassandraVersion " is not a supported Cassandra version") }}
{{- end }}
  managementApiAuth:
    insecure: {}
  size: {{ .Values.k8ssandra.size }}
  storageConfig:
    cassandraDataVolumeClaimSpec:
      storageClassName: {{ .Values.k8ssandra.cassandraLibDirVolume.storageClass | default "standard" }}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.k8ssandra.cassandraLibDirVolume.size | default "5Gi" }}
  allowMultipleNodesPerWorker: {{ .Values.k8ssandra.allowMultipleNodesPerWorker | default false}}
{{- if .Values.k8ssandra.allowMultipleNodesPerWorker}}
  resources:
    limits: 
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.k8ssandra.resources.limits) | indent 6}}
    requests:      
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.k8ssandra.resources.requests) | indent 6}}
{{- else if .Values.k8ssandra.resources }}
  resources:
{{ toYaml .Values.k8ssandra.resources | indent 6 }}
{{- end}}
  config:    
    cassandra-yaml:
{{- if .Values.k8ssandra.configuration.auth.enabled }}
      authenticator: PasswordAuthenticator
      authorizer: CassandraAuthorizer
{{- else }}
      authenticator: AllowAllAuthenticator
      authorizer: AllowAllAuthorizer
{{- end }}
      role_manager: CassandraRoleManager
      roles_validity_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheValidityPeriodMillis }}
      roles_update_interval_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheUpdateIntervalMillis }}
      permissions_validity_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheValidityPeriodMillis }}
      permissions_update_interval_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheUpdateIntervalMillis }}
      credentials_validity_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheValidityPeriodMillis }}
      credentials_update_interval_in_ms: {{ .Values.k8ssandra.configuration.auth.cacheUpdateIntervalMillis }}
    jvm-options:
      initial_heap_size: "800M"
      max_heap_size: "800M"

      additional-jvm-opts:
{{- if .Values.k8ssandra.configuration.auth.enabled }}
        - "-Dcassandra.system_distributed_replication_dc_names={{ .Values.k8ssandra.datacenterName }}"
        - "-Dcassandra.system_distributed_replication_per_dc={{ min 5 .Values.k8ssandra.size }}"
{{- end }}
  podTemplateSpec:
    spec:
{{- if or .Values.repair.reaper.enabled .Values.backupRestore.medusa.enabled }}
      initContainers:
      {{/* The server-config-init container is "built-in" in that it is provided by
           cass-operator. We specify it here in order to make it run first. It needs
           to run first when backup/restore is enabled. The configs need to be generated
           and present for the medusa-restore initContainer.
        */}}
      - name: server-config-init
{{- if .Values.repair.reaper.enabled }}
      - name: jmx-credentials
        image: busybox
        imagePullPolicy: IfNotPresent
        env:
          - name: JMX_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-reaper-secret-k8ssandra
                key: username
          - name: JMX_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-reaper-secret-k8ssandra
                key: password
        args:
          - /bin/sh
          - -c
          - echo -n "$JMX_USERNAME $JMX_PASSWORD" > /config/jmxremote.password
        volumeMounts:
          - mountPath: /config
            name: server-config
{{- end}}
{{- if .Values.backupRestore.medusa.enabled }}
      - name: get-jolokia
        image: busybox
        args:
          - /bin/sh
          - -c
          - wget https://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar && mv jolokia-jvm-1.6.2-agent.jar /config
        volumeMounts:
          - mountPath: /config
            name: server-config
      - name: medusa-restore
        # Images are currently built from https://github.com/thelastpickle/cassandra-medusa/tree/grpc/k8s
        image: jsanda/medusa:35d609cd0711
        imagePullPolicy: IfNotPresent
        env:
          - name: MEDUSA_MODE
            value: RESTORE
        volumeMounts:
          - name: {{ .Release.Name }}-medusa-config-k8ssandra
            mountPath: /etc/medusa/medusa.ini
            subPath: medusa.ini
          - name: server-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
{{- if eq .Values.backupRestore.medusa.storage "s3"}}
          - name: medusa-bucket-key
            mountPath: /etc/medusa-secrets
{{- else if eq .Values.backupRestore.medusa.storage "gcs"}}
          - name:  {{ .Values.backupRestore.medusa.bucketSecret }}
            mountPath: /etc/medusa-secrets
{{- end}}
{{- end}}
{{- end}}
      containers:
      - name: cassandra
{{- if or .Values.repair.reaper.enabled .Values.backupRestore.medusa.enabled }}
        env:
{{- if .Values.repair.reaper.enabled }}
          - name: LOCAL_JMX
            value: "no"
{{- end}}
{{- if .Values.backupRestore.medusa.enabled }}
          - name: JVM_EXTRA_OPTS
            value: -javaagent:/etc/cassandra/jolokia-jvm-1.6.2-agent.jar=port=7373,host=localhost
        volumeMounts:
          - name: cassandra-config
            mountPath: /etc/cassandra
      - name: medusa
        # Images are currently built from https://github.com/thelastpickle/cassandra-medusa/tree/grpc/k8s
        image: jsanda/medusa:35d609cd0711
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 50051
        env:
          - name: MEDUSA_MODE
            value: GRPC
        readinessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 10
        volumeMounts:
          - name: {{ .Release.Name }}-medusa-config-k8ssandra
            mountPath: /etc/medusa/medusa.ini
            subPath: medusa.ini
          - name: cassandra-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
          - mountPath: /etc/medusa-secrets
            name: {{ .Values.backupRestore.medusa.bucketSecret }}
      volumes:
      - name: {{ .Release.Name }}-medusa-config-k8ssandra
        configMap:
          name: {{ .Release.Name }}-medusa-config-k8ssandra
          items:
            - key: medusa.ini
              path: medusa.ini
      - name: cassandra-config
        emptyDir: {}
      - name:  {{ .Values.backupRestore.medusa.bucketSecret }}
        secret:
          secretName: {{ .Values.backupRestore.medusa.bucketSecret }}
{{- end }}
{{- end }}
