{{- $datacenter := (index .Values.cassandra.datacenters 0) -}}
{{- $medusaImage := (printf "%s:%s" .Values.medusa.image.repository .Values.medusa.image.tag) -}}

{{- if and (not .Values.cassandra.image)  (not (hasKey .Values.cassandra.versionImageMap .Values.cassandra.version)) -}}
  {{- fail (print .Values.cassandra.version " is not a supported Cassandra version") }}
{{- end -}}

apiVersion: cassandra.datastax.com/v1beta1
kind: CassandraDatacenter
metadata:
  name: {{ $datacenter.name }}
  labels: {{ include "k8ssandra.labels" . | indent 4 }}
  annotations:
{{- if .Values.reaper.enabled }}
    reaper.cassandra-reaper.io/instance: {{ .Release.Name }}-reaper
{{- end }}
spec:
  clusterName: {{ include "k8ssandra.clusterName" . }}
  serverType: cassandra
  serverVersion: {{ .Values.cassandra.version | quote }}
  dockerImageRunsAsCassandra: true
  serverImage: {{ default (get .Values.cassandra.versionImageMap .Values.cassandra.version) .Values.cassandra.image }}
  managementApiAuth:
    insecure: {}
  size: {{ $datacenter.size }}
  {{- if $datacenter.racks }}
  racks:
  {{- range $datacenter.racks  }}
  - name: {{ .name }}
    {{- if .affinityLabels }}
    nodeAffinityLabels: {{ toYaml .affinityLabels | nindent 6 }}
    {{- end}}
  {{- end }}
  {{- end }}
  storageConfig:
    cassandraDataVolumeClaimSpec:
      storageClassName: {{ .Values.cassandra.cassandraLibDirVolume.storageClass | default "standard" }}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.cassandra.cassandraLibDirVolume.size | default "5Gi" }}
  allowMultipleNodesPerWorker: {{ .Values.cassandra.allowMultipleNodesPerWorker | default false}}
{{- if .Values.cassandra.allowMultipleNodesPerWorker}}
  resources:
    limits:
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.cassandra.resources.limits) | indent 6}}
    requests:
{{ toYaml (required "set resource limits/requests when enabling allowMultipleNodesPerWorker" .Values.cassandra.resources.requests) | indent 6}}
{{- else if .Values.cassandra.resources }}
  resources:
{{ toYaml .Values.cassandra.resources | indent 6 }}
{{- end }}
{{- if .Values.cassandra.auth.enabled }}
{{- if .Values.cassandra.auth.superuser.secret }}
  superuserSecretName: {{ .Values.cassandra.auth.superuser.secret }}
{{- else if .Values.cassandra.auth.superuser.username }}
  superuserSecretName: {{ include "k8ssandra.superuserSecretName" . }}
{{- end }}
  {{- if or .Values.reaper.enabled .Values.medusa.enabled .Values.stargate.enabled }}
  users:
  {{- if .Values.reaper.enabled }}
    - secretName: {{ include "k8ssandra.reaperUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- if .Values.medusa.enabled }}
    - secretName: {{ include "k8ssandra.medusaUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- if .Values.stargate.enabled }}
    - secretName: {{ include "k8ssandra.stargateUserSecretName" . }}
      superuser: true
  {{- end }}
  {{- end }}
{{- end }}
  config:
  {{- /*
    configOverride is an undocumented property that is intended for advanced use cases like
    production support. General use is discouraged If there is a particular Cassandra or
    JVM setting you need exposed, please open an issue for it.
   */ -}}
  {{- if .Values.cassandra.configOverride }}
    {{- toYaml .Values.cassandra.configOverride | nindent 4 -}}
  {{- else }}
    cassandra-yaml:
      {{- include "k8ssandra.default_num_tokens" . }}
  {{- if .Values.cassandra.auth.enabled }}
      authenticator: PasswordAuthenticator
      authorizer: CassandraAuthorizer
  {{- else }}
      authenticator: AllowAllAuthenticator
      authorizer: AllowAllAuthorizer
  {{- end }}
      role_manager: CassandraRoleManager
      roles_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      roles_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
      permissions_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      permissions_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
      credentials_validity_in_ms: {{ .Values.cassandra.auth.cacheValidityPeriodMillis }}
      credentials_update_interval_in_ms: {{ .Values.cassandra.auth.cacheUpdateIntervalMillis }}
  {{- if (hasPrefix "3" .Values.cassandra.version) }}
    jvm-options:
  {{- else }}
    jvm-server-options:
  {{- end }}
  {{- include "k8ssandra.configureGc" . -}}
{{- include "k8ssandra.configureJvmHeap" . }}
      additional-jvm-opts:
{{- if .Values.cassandra.auth.enabled }}
        - "-Dcassandra.system_distributed_replication_dc_names={{ $datacenter.name }}"
        - "-Dcassandra.system_distributed_replication_per_dc={{ min 5 $datacenter.size }}"
{{- end }}
{{- end }}
  podTemplateSpec:
    spec:
      initContainers:
      - name: server-config-init
     {{- if (or .Values.cassandra.auth.enabled .Values.reaper.enabled) }}
      - name: jmx-credentials
        image: busybox
        imagePullPolicy: IfNotPresent
        env:
        {{- if .Values.reaper.enabled }}
          - name: REAPER_JMX_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.reaperJmxUserSecretName" . }}
                key: username
          - name: REAPER_JMX_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.reaperJmxUserSecretName" . }}
                key: password
          {{- end }}
          - name: SUPERUSER_JMX_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.superuserSecretName" . }}
                key: username
          - name: SUPERUSER_JMX_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "k8ssandra.superuserSecretName" . }}
                key: password
        args:
          - /bin/sh
          - -c
        {{- if .Values.reaper.enabled }}
          - echo "$REAPER_JMX_USERNAME $REAPER_JMX_PASSWORD" > /config/jmxremote.password && echo "$SUPERUSER_JMX_USERNAME $SUPERUSER_JMX_PASSWORD" >> /config/jmxremote.password
        {{- else }}
          - echo "$SUPERUSER_JMX_USERNAME $SUPERUSER_JMX_PASSWORD" > /config/jmxremote.password
        {{- end }}
        volumeMounts:
          - mountPath: /config
            name: server-config
      {{- end }}
      {{- if (hasPrefix "4" .Values.cassandra.version) }}
      - name: jvm-client-options
        image: busybox
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
        args:
          - -c
          - echo "-Djdk.attach.allowAttachSelf=true" > /config/jvm11-clients.options &&
            echo "--add-exports java.base/jdk.internal.misc=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-exports java.base/jdk.internal.ref=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-exports java.base/sun.nio.ch=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-exports java.rmi/sun.rmi.server=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-exports java.sql/java.sql=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/java.lang.module=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.loader=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.ref=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.reflect=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.math=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.module=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens java.base/jdk.internal.util.jar=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "--add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED" >> /config/jvm11-clients.options &&
            echo "" >> /config/jvm11-clients.options &&
            echo "# The newline in the end of file is intentional" >> /config/jvm11-clients.options &&
            echo "" >> /config/jvm11-clients.options &&
            echo "# The newline in the end of file is intentional" > /config/jvm-clients.options &&
            echo "" >> /config/jmv-clients.options
        volumeMounts:
          - mountPath: /config
            name: server-config
      {{- end }}
      {{- if .Values.medusa.enabled }}
      - name: get-jolokia
        image: busybox
        args:
          - /bin/sh
          - -c
          - wget -O  /config/jolokia-jvm-1.6.2-agent.jar https://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar
        volumeMounts:
          - mountPath: /config
            name: server-config
      - name: medusa-restore
        image: {{ $medusaImage }}
        imagePullPolicy: {{ .Values.medusa.image.pullPolicy }}
        env:
          - name: MEDUSA_MODE
            value: RESTORE
          {{- include "medusa.cassandraAuthEnvVars" . }}
        volumeMounts:
          - name: {{ include "medusa.configMapName" . }}
            mountPath: /etc/medusa
          - name: server-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
          - name:  {{ .Values.medusa.storageSecret }}
            mountPath: /etc/medusa-secrets
      {{- end }}
      containers:
      - name: cassandra
       {{- if or .Values.reaper.enabled .Values.medusa.enabled }}
        env:
          {{- if .Values.reaper.enabled }}
          - name: LOCAL_JMX
            value: "no"
          {{- end }}
       {{- if .Values.medusa.enabled }}
          - name: JVM_EXTRA_OPTS
            value: -javaagent:/etc/cassandra/jolokia-jvm-1.6.2-agent.jar=port=7373,host=localhost
        volumeMounts:
          - name: cassandra-config
            mountPath: /etc/cassandra
      - name: medusa
        image: {{ $medusaImage }}
        imagePullPolicy: {{ .Values.medusa.image.pullPolicy }}
        ports:
          - containerPort: 50051
        env:
          - name: MEDUSA_MODE
            value: GRPC
          {{- include "medusa.cassandraAuthEnvVars" . }}
        readinessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: [ "/bin/grpc_health_probe", "-addr=:50051" ]
          initialDelaySeconds: 10
        volumeMounts:
          - name: {{ include "medusa.configMapName" . }}
            mountPath: /etc/medusa
          - name: cassandra-config
            mountPath: /etc/cassandra
          - mountPath: /var/lib/cassandra
            name: server-data
          - mountPath: /etc/medusa-secrets
            name: {{ .Values.medusa.storageSecret }}
      volumes:
      - name: {{ include "medusa.configMapName" . }}
        configMap:
          name: {{ include "medusa.configMapName" . }}
          items:
            - key: medusa.ini
              path: medusa.ini
      - name: cassandra-config
        emptyDir: {}
      - name:  {{ .Values.medusa.storageSecret }}
        secret:
          secretName: {{ .Values.medusa.storageSecret }}
{{- end }}
{{- end }}
